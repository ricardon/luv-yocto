From f23f222eb1067e1fbe265aba099e7adbc7576d08 Mon Sep 17 00:00:00 2001
From: Matt Fleming <matt.fleming@intel.com>
Date: Tue, 24 Mar 2015 17:44:03 -0700
Subject: [PATCH 16/16] foo

---
 grub-core/kern/x86_64/efi/callwrap.S | 23 +++++++++++++++++++
 grub-core/loader/efi/chainloader.c   | 44 ++++++++----------------------------
 include/grub/efi/api.h               |  4 ++++
 3 files changed, 36 insertions(+), 35 deletions(-)

diff --git a/grub-core/kern/x86_64/efi/callwrap.S b/grub-core/kern/x86_64/efi/callwrap.S
index 2df95dd..f0f1dd8 100644
--- a/grub-core/kern/x86_64/efi/callwrap.S
+++ b/grub-core/kern/x86_64/efi/callwrap.S
@@ -48,6 +48,26 @@ FUNCTION(efi_wrap_1)
 	addq $48, %rsp
 	ret
 
+FUNCTION(efi_call_foo)
+	pushq %rbp
+	pushq %r12
+	pushq %r13
+	pushq %r14
+	pushq %r15
+	movq %rsp, saved_sp(%rip)
+	subq $48, %rsp
+	mov  %rsi, %rcx
+	call *%rdi
+
+FUNCTION(efi_shim_exit)
+	movq saved_sp(%rip), %rsp
+	popq %r15
+	popq %r14
+	popq %r13
+	popq %r12
+	popq %rbp
+	ret
+
 FUNCTION(efi_wrap_2)
 	subq $48, %rsp
 	mov  %rsi, %rcx
@@ -127,3 +147,6 @@ FUNCTION(efi_wrap_10)
 	call *%rdi
 	addq $96, %rsp
 	ret
+
+	.data
+saved_sp:	.quad   0
diff --git a/grub-core/loader/efi/chainloader.c b/grub-core/loader/efi/chainloader.c
index 15b33a5..3292453 100644
--- a/grub-core/loader/efi/chainloader.c
+++ b/grub-core/loader/efi/chainloader.c
@@ -525,25 +525,6 @@ static grub_efi_status_t read_header(void *data, unsigned int datasize,
 	return GRUB_EFI_SUCCESS;
 }
 
-/* Our own exit function does not need to do anything special */
-static grub_efi_status_t grub_chainloader_exit(grub_efi_handle_t img_handle,
-				   grub_efi_status_t exit_status,
-				   grub_efi_uintn_t exit_data_size,
-				   grub_efi_char16_t *exit_data)
-{
-	grub_printf("grub chainloader exit...\n");
-	/* sanity check the image handle */
-	if (!img_handle)
-		return GRUB_EFI_INVALID_PARAMETER;
-	/* this is really to do something with the exit_data and
-	 * exit_data_size of the signature and avoid build warnings.
-	 * Plus, grub sets both params to zero
-	 */
-	if (!exit_data || exit_data_size)
-		return GRUB_EFI_BAD_BUFFER_SIZE;
-	return exit_status;
-}
-
 static grub_err_t
 grub_chainloader_unload (void)
 {
@@ -697,6 +678,11 @@ grub_cmd_chainloader (grub_command_t cmd __attribute__ ((unused)),
   grub_efi_loaded_image_t *loaded_image;
   char *filename;
   grub_efi_handle_t dev_handle = 0;
+  grub_efi_status_t
+  (*saved_exit) (grub_efi_handle_t image_handle,
+		 grub_efi_status_t exit_status,
+	         grub_efi_uintn_t exit_data_size,
+                 grub_efi_char16_t *exit_data) __attribute__((noreturn));
 
   if (argc == 0)
     return grub_error (GRUB_ERR_BAD_ARGUMENT, N_("filename expected"));
@@ -805,10 +791,6 @@ grub_cmd_chainloader (grub_command_t cmd __attribute__ ((unused)),
 	char *base, *end;
 	int i;
 	grub_efi_loaded_image_t *parent_li, parent_li_bak;
-	grub_efi_status_t  (*system_exit) (grub_efi_handle_t image_handle,
-					   grub_efi_status_t exit_status,
-					   grub_efi_uintn_t exit_data_size,
-					   grub_efi_char16_t *exit_data) __attribute__((noreturn));
 
         c = grub_efi_locate_protocol (&shim_protocol_guid, 0);
         grub_printf ("PF [0x%p]", (void *)c);
@@ -962,19 +944,11 @@ grub_cmd_chainloader (grub_command_t cmd __attribute__ ((unused)),
 	      parent_li->load_options_size = len;
 	    }
 
-	/* replace the boot services exit function, as this will be called
-	 * by grub. The exit function is designed to work in conjunction with
-	 * LoadImage and StartImage and lots of things happen
-	 */
-	system_exit = grub_efi_system_table->boot_services->exit;
-	grub_efi_system_table->boot_services->exit = grub_chainloader_exit;
-
 	/* run the image! */
-	status = efi_call_2(entry_point, grub_efi_image_handle, grub_efi_system_table);
-
-	grub_efi_system_table->boot_services->exit = system_exit;
-
-	grub_printf("ran image [%ld]\n", status);
+	saved_exit = grub_efi_system_table->boot_services->exit;
+	grub_efi_system_table->boot_services->exit = efi_shim_exit;
+	status = efi_call_foo(entry_point, (grub_efi_uint64_t)grub_efi_image_handle, (grub_efi_uint64_t)grub_efi_system_table);
+	grub_efi_system_table->boot_services->exit = saved_exit;
 
 	grub_printf("I made it here!!\n");
 	/* restore loaded image */
diff --git a/include/grub/efi/api.h b/include/grub/efi/api.h
index 26127de..374d88b 100644
--- a/include/grub/efi/api.h
+++ b/include/grub/efi/api.h
@@ -1437,6 +1437,10 @@ typedef struct grub_efi_block_io grub_efi_block_io_t;
 
 grub_uint64_t EXPORT_FUNC(efi_wrap_0) (void *func);
 grub_uint64_t EXPORT_FUNC(efi_wrap_1) (void *func, grub_uint64_t arg1);
+grub_efi_status_t EXPORT_FUNC(efi_shim_exit) (grub_efi_handle_t handle, grub_efi_status_t exit_status,
+					      grub_efi_uintn_t exit_data_size, grub_efi_char16_t *exit_data) __attribute__((noreturn));
+grub_uint64_t EXPORT_FUNC(efi_call_foo) (void *func, grub_uint64_t arg1,
+					 grub_uint64_t arg2);
 grub_uint64_t EXPORT_FUNC(efi_wrap_2) (void *func, grub_uint64_t arg1,
                                        grub_uint64_t arg2);
 grub_uint64_t EXPORT_FUNC(efi_wrap_3) (void *func, grub_uint64_t arg1,
-- 
1.9.1

