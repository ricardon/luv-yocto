diff -Nurp a/efi_runtime/efi_runtime.c b/efi_runtime/efi_runtime.c
--- a/efi_runtime/efi_runtime.c	2014-07-27 00:43:39.263763036 -0700
+++ b/efi_runtime/efi_runtime.c	2014-08-14 23:12:47.746531304 -0700
@@ -108,7 +108,7 @@ static void convert_to_guid(efi_guid_t *vendor, EFI_GUID *vendor_guid)
  */
 static inline size_t __strsize(uint16_t *str)
 {
-	uint16_t *s = str;
+	uint16_t *s = str, c;
 	size_t len;
 
 	if (!str)
@@ -117,9 +117,18 @@ static inline size_t __strsize(uint16_t *str)
 	/* Include terminating NULL */
 	len = sizeof(uint16_t);
 
-	while (*s++ != 0)
-		len += sizeof(uint16_t);
+	if(get_user(c, s++)) {
+		WARN(1, "fwts: Can't read userspace memory for size");
+		return 0;
+	}
 
+	while (c != 0) {
+		if (get_user(c, s++)) {
+			WARN(1, "Can't read userspace memory for size");
+			return 0;
+		}
+		len += sizeof(uint16_t);
+	}
 	return len;
 }
 
@@ -207,6 +216,7 @@ static inline int put_ucs2(uint16_t *src, uint16_t __user *dst)
 static long efi_runtime_get_variable(unsigned long arg)
 {
 	struct efi_getvariable __user *pgetvariable;
+	struct efi_getvariable pgetvariable_local;
 	unsigned long datasize;
 	EFI_GUID vendor_guid;
 	efi_guid_t vendor;
@@ -218,14 +228,18 @@ static long efi_runtime_get_variable(unsigned long arg)
 
 	pgetvariable = (struct efi_getvariable __user *)arg;
 
-	if (get_user(datasize, pgetvariable->DataSize) ||
-		copy_from_user(&vendor_guid, pgetvariable->VendorGuid,
-						sizeof(EFI_GUID)))
+	if (copy_from_user(&pgetvariable_local, pgetvariable,
+			   sizeof(pgetvariable_local)))
+		return -EFAULT;
+
+	if (get_user(datasize, pgetvariable_local.DataSize) ||
+	    copy_from_user(&vendor_guid, pgetvariable_local.VendorGuid,
+			   sizeof(vendor_guid)))
 		return -EFAULT;
 
 	convert_from_guid(&vendor, &vendor_guid);
 
-	rv = get_ucs2(&name, pgetvariable->VariableName);
+	rv = get_ucs2(&name, pgetvariable_local.VariableName);
 	if (rv)
 		return rv;
 
@@ -239,17 +253,17 @@ static long efi_runtime_get_variable(unsigned long arg)
 
 	kfree(name);
 
-	rv = copy_to_user(pgetvariable->Data, data, datasize);
+	rv = copy_to_user(pgetvariable_local.Data, data, datasize);
 	kfree(data);
 
 	if (rv)
 		return rv;
 
-	if (put_user(status, pgetvariable->status))
+	if (put_user(status, pgetvariable_local.status))
 		return -EFAULT;
 	if (status == EFI_SUCCESS) {
-		if (put_user(attr, pgetvariable->Attributes) ||
-			put_user(datasize, pgetvariable->DataSize))
+		if (put_user(attr, pgetvariable_local.Attributes) ||
+		    put_user(datasize, pgetvariable_local.DataSize))
 			return -EFAULT;
 		return 0;
 	} else {
@@ -263,40 +277,43 @@ static long efi_runtime_get_variable(unsigned long arg)
 static long efi_runtime_set_variable(unsigned long arg)
 {
 	struct efi_setvariable __user *psetvariable;
-	unsigned long datasize;
+	struct efi_setvariable psetvariable_local;
 	EFI_GUID vendor_guid;
 	efi_guid_t vendor;
 	efi_status_t status;
 	uint16_t *name;
-	uint32_t attr;
 	void *data;
 	int rv;
 
 	psetvariable = (struct efi_setvariable __user *)arg;
-	if (get_user(datasize, &psetvariable->DataSize) ||
-		get_user(attr, &psetvariable->Attributes) ||
-		copy_from_user(&vendor_guid, psetvariable->VendorGuid,
-						sizeof(EFI_GUID)))
+
+	if (copy_from_user(&psetvariable_local, psetvariable,
+			   sizeof(psetvariable_local)))
+		return -EFAULT;
+	if (copy_from_user(&vendor_guid, psetvariable_local.VendorGuid,
+			   sizeof(vendor_guid)))
 		return -EFAULT;
 
 	convert_from_guid(&vendor, &vendor_guid);
 
-	rv = get_ucs2(&name, psetvariable->VariableName);
+	rv = get_ucs2(&name, psetvariable_local.VariableName);
 	if (rv)
 		return rv;
 
-	data = kmalloc(datasize, GFP_KERNEL);
-	if (copy_from_user(data, psetvariable->Data, datasize)) {
+	data = kmalloc(psetvariable_local.DataSize, GFP_KERNEL);
+	if (copy_from_user(data, psetvariable_local.Data,
+			   psetvariable_local.DataSize)) {
 		kfree(name);
 		return -EFAULT;
 	}
 
-	status = efi.set_variable(name, &vendor, attr, datasize, data);
+	status = efi.set_variable(name, &vendor, psetvariable_local.Attributes,
+				  psetvariable_local.DataSize, data);
 
 	kfree(data);
 	kfree(name);
 
-	if (put_user(status, psetvariable->status))
+	if (put_user(status, psetvariable_local.status))
 		return -EFAULT;
 	return status == EFI_SUCCESS ? 0 : -EINVAL;
 }
@@ -304,52 +304,60 @@ static long efi_runtime_set_variable(uns
 static long efi_runtime_get_time(unsigned long arg)
 {
 	struct efi_gettime __user *pgettime;
+	struct efi_gettime  pgettime_local;
+	EFI_TIME_CAPABILITIES __user *cap_local;
 	efi_status_t status;
 	efi_time_cap_t cap;
 	efi_time_t eft;
 
 	status = efi.get_time(&eft, &cap);
 	pgettime = (struct efi_gettime __user *)arg;
-	if (put_user(status, pgettime->status))
+	if (copy_from_user(&pgettime_local, pgettime, sizeof(pgettime_local)))
+		return -EFAULT;
+
+	cap_local = (EFI_TIME_CAPABILITIES *)pgettime_local.Capabilities;
+	if (put_user(status, pgettime_local.status))
 		return -EFAULT;
 	if (status != EFI_SUCCESS) {
 		printk(KERN_ERR "efitime: can't read time\n");
 		return -EINVAL;
 	}
-	if (put_user(cap.resolution,
-				&pgettime->Capabilities->Resolution) ||
-				put_user(cap.accuracy,
-				&pgettime->Capabilities->Accuracy) ||
-				put_user(cap.sets_to_zero,
-				&pgettime->Capabilities->SetsToZero))
+	if (put_user(cap.resolution, 
+				&(cap_local->Resolution)) || 
+				put_user(cap.accuracy, &(cap_local->Accuracy)) || 
+				put_user(cap.sets_to_zero,&(cap_local->SetsToZero)))
 		return -EFAULT;
-	return copy_to_user(pgettime->Time, &eft,
+	return copy_to_user(pgettime_local.Time, &eft,
 			sizeof(EFI_TIME)) ? -EFAULT : 0;
 }
 
 static long efi_runtime_set_time(unsigned long arg)
 {
 	struct efi_settime __user *psettime;
+	struct efi_settime psettime_local;
 	efi_status_t status;
 	EFI_TIME efi_time;
 	efi_time_t eft;
 
 	psettime = (struct efi_settime __user *)arg;
-	if (copy_from_user(&efi_time, psettime->Time,
+	if (copy_from_user(&psettime_local, psettime, sizeof(psettime_local)))
+		return -EFAULT;
+	if (copy_from_user(&efi_time, psettime_local.Time,
 					sizeof(EFI_TIME)))
 		return -EFAULT;
 	convert_to_efi_time(&eft, &efi_time);
 	status = efi.set_time(&eft);
 
-	if (put_user(status, psettime->status))
+	if (put_user(status, psettime_local.status))
 		return -EFAULT;
-
-	return status == EFI_SUCCESS ? 0 : -EINVAL;
+	
+	return status == EFI_SUCCESS ? 0 : -EINVAL;  
 }
 
 static long efi_runtime_get_waketime(unsigned long arg)
 {
 	struct efi_getwakeuptime __user *pgetwakeuptime;
+	struct efi_getwakeuptime pgetwakeuptime_local;
 	unsigned char enabled, pending;
 	efi_status_t status;
 	EFI_TIME efi_time;
@@ -357,53 +365,56 @@ static long efi_runtime_get_waketime(uns
 
 	status = efi.get_wakeup_time((efi_bool_t *)&enabled,
 					(efi_bool_t *)&pending, &eft);
-
+	
 	pgetwakeuptime = (struct efi_getwakeuptime __user *)arg;
-
-	if (put_user(status, pgetwakeuptime->status))
+	
+	if (copy_from_user(&pgetwakeuptime_local, pgetwakeuptime, sizeof(pgetwakeuptime_local)))
+		return -EFAULT;
+	if (put_user(status, pgetwakeuptime_local.status))
 		return -EFAULT;
 	if (status != EFI_SUCCESS)
 		return -EINVAL;
-
-	if (put_user(enabled, pgetwakeuptime->Enabled) ||
-			put_user(pending, pgetwakeuptime->Pending))
+	if (put_user(enabled, pgetwakeuptime_local.Enabled) ||
+				put_user(pending, pgetwakeuptime_local.Pending))
 		return -EFAULT;
-
 	convert_from_efi_time(&eft, &efi_time);
-
-	return copy_to_user(pgetwakeuptime->Time, &efi_time,
+	
+	return copy_to_user(pgetwakeuptime_local.Time, &efi_time,
 			sizeof(EFI_TIME)) ? -EFAULT : 0;
 }
 
 static long efi_runtime_set_waketime(unsigned long arg)
 {
 	struct efi_setwakeuptime __user *psetwakeuptime;
+	struct efi_setwakeuptime psetwakeuptime_local;
 	unsigned char enabled;
 	efi_status_t status;
 	EFI_TIME efi_time;
 	efi_time_t eft;
 
 	psetwakeuptime = (struct efi_setwakeuptime __user *)arg;
-
-	if (get_user(enabled, &psetwakeuptime->Enabled) ||
-				copy_from_user(&efi_time,
-				psetwakeuptime->Time,
-				sizeof(EFI_TIME)))
+	
+	if (copy_from_user(&psetwakeuptime_local, psetwakeuptime, sizeof(psetwakeuptime_local)))
 		return -EFAULT;
-
+	
+	if (get_user(enabled, &(psetwakeuptime_local.Enabled)) || 
+				copy_from_user(&efi_time, psetwakeuptime_local.Time, sizeof(EFI_TIME)))
+		return -EFAULT;
+	
 	convert_to_efi_time(&eft, &efi_time);
-
+	
 	status = efi.set_wakeup_time(enabled, &eft);
-
-	if (put_user(status, psetwakeuptime->status))
+	
+	if (put_user(status, psetwakeuptime_local.status))
 		return -EFAULT;
-
+	
 	return status == EFI_SUCCESS ? 0 : -EINVAL;
 }
 
 static long efi_runtime_get_nextvariablename(unsigned long arg)
 {
 	struct efi_getnextvariablename __user *pgetnextvariablename;
+	struct efi_getnextvariablename pgetnextvariablename_local;
 	unsigned long name_size;
 	efi_status_t status;
 	efi_guid_t vendor;
@@ -414,37 +442,41 @@ static long efi_runtime_get_nextvariablename(unsigned long arg)
 	pgetnextvariablename = (struct efi_getnextvariablename
 							__user *)arg;
 
-	if (get_user(name_size, pgetnextvariablename->VariableNameSize)
-			|| copy_from_user(&vendor_guid,
-				pgetnextvariablename->VendorGuid,
-				sizeof(EFI_GUID)))
+	if (copy_from_user(&pgetnextvariablename_local, pgetnextvariablename,
+			   sizeof(pgetnextvariablename_local)))
+		return -EFAULT;
+
+	if (get_user(name_size, pgetnextvariablename_local.VariableNameSize) ||
+	    copy_from_user(&vendor_guid, pgetnextvariablename_local.VendorGuid,
+			   sizeof(vendor_guid)))
 		return -EFAULT;
 	if (name_size > 1024)
 		return -EFAULT;
 
 	convert_from_guid(&vendor, &vendor_guid);
 
-	rv = get_ucs2_len(&name, pgetnextvariablename->VariableName, 1024);
+	rv = get_ucs2_len(&name, pgetnextvariablename_local.VariableName, 1024);
 	if (rv)
 		return rv;
 
 	status = efi.get_next_variable(&name_size, name, &vendor);
 
-	rv = put_ucs2_len(name, pgetnextvariablename->VariableName, name_size);
+	rv = put_ucs2_len(name, pgetnextvariablename_local.VariableName,
+			  name_size);
 	kfree(name);
 
 	if (rv)
 		return -EFAULT;
 
-	if (put_user(status, pgetnextvariablename->status))
+	if (put_user(status, pgetnextvariablename_local.status))
 		return -EFAULT;
 	convert_to_guid(&vendor, &vendor_guid);
 
-	if (put_user(name_size, pgetnextvariablename->VariableNameSize))
+	if (put_user(name_size, pgetnextvariablename_local.VariableNameSize))
 		return -EFAULT;
 
-	if (copy_to_user(pgetnextvariablename->VendorGuid,
-					&vendor_guid, sizeof(EFI_GUID)))
+	if (copy_to_user(pgetnextvariablename_local.VendorGuid,
+			 &vendor_guid, sizeof(EFI_GUID)))
 		return -EFAULT;
 	if (status != EFI_SUCCESS)
 		return -EINVAL;
@@ -454,6 +486,7 @@ static long efi_runtime_get_nextvariablename(unsigned long arg)
 static long efi_runtime_get_nexthighmonocount(unsigned long arg)
 {
 	struct efi_getnexthighmonotoniccount __user *pgetnexthighmonotoniccount;
+	struct efi_getnexthighmonotoniccount pgetnexthighmonotoniccount_local;
 	efi_status_t status;
 	uint32_t count;
 
@@ -461,10 +494,15 @@ static long efi_runtime_get_nexthighmonocount(unsigned long arg)
 			efi_getnexthighmonotoniccount __user *)arg;
 
 	status = efi.get_next_high_mono_count(&count);
-	if (put_user(status, pgetnexthighmonotoniccount->status))
+
+	if (copy_from_user(&pgetnexthighmonotoniccount_local,
+			   pgetnexthighmonotoniccount,
+			   sizeof(pgetnexthighmonotoniccount_local)))
+		return -EFAULT;
+	if (put_user(status, pgetnexthighmonotoniccount_local.status))
 		return -EFAULT;
 
-	if (put_user(count, pgetnexthighmonotoniccount->HighCount))
+	if (put_user(count, pgetnexthighmonotoniccount_local.HighCount))
 		return -EFAULT;
 
 	if (status != EFI_SUCCESS)
@@ -478,28 +516,31 @@ static long efi_runtime_get_nexthighmonocount(unsigned long arg)
 static long efi_runtime_query_variableinfo(unsigned long arg)
 {
 	struct efi_queryvariableinfo __user *pqueryvariableinfo;
+	struct efi_queryvariableinfo pqueryvariableinfo_local;
 	efi_status_t status;
 	uint64_t max_storage, remaining, max_size;
-	uint32_t attr;
 
 	pqueryvariableinfo = (struct efi_queryvariableinfo __user *)arg;
 
-	if (get_user(attr, &pqueryvariableinfo->Attributes))
+	if (copy_from_user(&pqueryvariableinfo_local, pqueryvariableinfo,
+			   sizeof(pqueryvariableinfo_local)))
 		return -EFAULT;
 
-	status = efi.query_variable_info(attr, &max_storage,
-					 &remaining, &max_size);
+	status = efi.query_variable_info(pqueryvariableinfo_local.Attributes,
+					 &max_storage, &remaining, &max_size);
 
-	if (put_user(max_storage, pqueryvariableinfo->MaximumVariableStorageSize))
+	if (put_user(max_storage,
+		     pqueryvariableinfo_local.MaximumVariableStorageSize))
 		return -EFAULT;
 
-	if (put_user(remaining, pqueryvariableinfo->RemainingVariableStorageSize))
+	if (put_user(remaining,
+		     pqueryvariableinfo_local.RemainingVariableStorageSize))
 		return -EFAULT;
 
-	if (put_user(max_size, pqueryvariableinfo->MaximumVariableSize))
+	if (put_user(max_size, pqueryvariableinfo_local.MaximumVariableSize))
 		return -EFAULT;
 
-	if (put_user(status, pqueryvariableinfo->status))
+	if (put_user(status, pqueryvariableinfo_local.status))
 		return -EFAULT;
 	if (status != EFI_SUCCESS)
 		return -EINVAL;
@@ -527,9 +568,15 @@ static long efi_runtime_query_capsulecaps(unsigned long arg)
 		return -ENOMEM;
 
 	for (i = 0; i < caps.CapsuleCount; i++) {
-		if (copy_from_user(&capsules[i],
-				   (EFI_CAPSULE_HEADER *)u_caps->CapsuleHeaderArray[i],
-				   sizeof(EFI_CAPSULE_HEADER)))
+		EFI_CAPSULE_HEADER *c;
+		/*
+		 * We cannot dereference caps.CapsuleHeaderArray directly to
+		 * obtain the address of the capsule as it resides in the
+		 * user space
+		 */
+		if (get_user(c, caps.CapsuleHeaderArray + i))
+			return -EFAULT;
+		if (copy_from_user(&capsules[i], c, sizeof(EFI_CAPSULE_HEADER)))
 			return -EFAULT;
 	}
 
@@ -540,13 +587,13 @@ static long efi_runtime_query_capsulecaps(unsigned long arg)
 					caps.CapsuleCount,
 					&max_size, &reset_type);
 
-	if (put_user(status, u_caps->status))
+	if (put_user(status, caps.status))
 		return -EFAULT;
 
-	if (put_user(max_size, u_caps->MaximumCapsuleSize))
+	if (put_user(max_size, caps.MaximumCapsuleSize))
 		return -EFAULT;
 
-	if (put_user(reset_type, u_caps->ResetType))
+	if (put_user(reset_type, caps.ResetType))
 		return -EFAULT;
 
 	if (status != EFI_SUCCESS)
