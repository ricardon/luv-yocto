#
# Copyright 2014 Intel Corporation; author Ricardo Neri
#
# The crash handler provides a safety net to LuvOS in case there is a kernel
# crash while running the tests. It will make preparations to reboot the
# system with kexec and dump all the available crash information in the
# recovery boot.

# In regular boot, we prepare the recovery kernel and initrd image. These images
# are obtained from a disk partition identified by its UUID. Behavior changes
# according to the runlevel.

FIFO="/mnt/.psplash/psplash_fifo"
psplash_write() {
    if [ -e $FIFO ]; then
	echo $1 > $FIFO
    fi
}

runl=`runlevel`
# If we are in runlevel 5, we are on a regular boot and we only have to
# prepare everything in case there is a kernel crash in the future.
if [[ $runl == *5* ]]; then
    # Not all disks may be ready to mount at this moment.
    # Thus, we need to wait for them.
    psplash_write "MSG Preparing crash handler..."
    for n in 0 25 50 75 100
    do
        psplash_write "PROGRESS $n"
    sleep 1
    done

    LUV_BOOT_PARTITION=/mnt/boot/
    LUV_BOOT_PARTITION_UUID=423C-C2C8
    LUV_DISK_DEVICE=/dev/disk/by-uuid/${LUV_BOOT_PARTITION_UUID}

    mkdir -p ${LUV_BOOT_PARTITION}
    if [ $? -eq 0 ]; then
        mount ${LUV_DISK_DEVICE} ${LUV_BOOT_PARTITION}
        if [ $? -eq 0 ]; then
            kexec -p --initrd=${LUV_BOOT_PARTITION}initrd --append="noluv 3 \
                  irqpoll maxcpus=1 reset_devices" ${LUV_BOOT_PARTITION}vmlinuz
            umount ${LUV_BOOT_PARTITION}
        fi
    fi
fi

# If we are in runlevel 3, we just recovered from a crash. We need to dump
# the /proc/vmcore file.
if [[ $runl == *3* ]]; then

    LUV_STORAGE=/mnt/luv-storage/
    LUV_PARTITION_UUID=05D6-1523
    LUV_DISK_DEVICE=/dev/disk/by-uuid/${LUV_PARTITION_UUID}
    LUV_DEBUG_DIR=${LUV_STORAGE}luv-debug/
    LUV_DEBUG_FILE=luv-debug.log
    LUV_README_FILE=README.txt

    LUV_DEBUG_README="
    Oops. It looks like the system crashed while running the tests. We can
    help to determine what went wrong. Along with this file, you will see a
    ${LUV_DEBUG_FILE} file. Please report your crash to luv@lists.01.org or
    submit a bug report on https://github.com/01org/luv-yocto/issues. In either
    case, please submit the contents of ${LUV_DEBUG_FILE}."

    psplash_write "MSG Recovery Boot. Saving debug info..."

    mkdir -p ${LUV_STORAGE}
    if [ $? -eq 0 ]; then

        mount ${LUV_DISK_DEVICE} ${LUV_STORAGE}
        if [ $? -eq 0 ]; then

            mkdir -p ${LUV_DEBUG_DIR}
            if [ $? -eq 0 ]; then
                vmcore-dmesg /proc/vmcore > ${LUV_DEBUG_DIR}${LUV_DEBUG_FILE}
                echo ${LUV_DEBUG_README} > ${LUV_DEBUG_DIR}${LUV_README_FILE}
            fi
        fi
    fi

    if [ -f ${LUV_DEBUG_DIR}${LUV_DEBUG_FILE} ]; then
        psplash_write "MSG Recovery boot. Debug info saved on your non-volatile media.
                       You may safely remove it."
    else
        psplash_write "MSG Recovery boot. Could not save debug info."
    fi

    mountpoint -q ${LUV_STORAGE}
    [ $? -eq 0 ] && umount ${LUV_STORAGE}

    psplash_write "DONE"

    # umount to prevent rc from quitting psplash
    umount -l /mnt/.psplash

fi
